Práctica 3 - LPP

18. Señala que se ha terminado de definir el método.
21. Con comillas dobles busca lo que hay dentro e interpreta lo que hay, y con comillas simples lo reconoce como texto.
22. %q con minúsculas lo considera texto.
23. %Q con mayúsculas lo interpreta como comillas dobles.
24. C muestra los valores de a y b junto con los dos guiones.
25. C no va a mostrar los valores ya que el 'HERE' está con comillas simples y por tanto lo reconoce como texto en vez de interpretarlo.
26. s[0,2] = he
    s[-1,1] = o
    s[0,10] = hello
27. Queda la unión entre lo primero que se use y lo siguiente, es decir Hello World
28. Usa tantos puntos o el caracter elegido como se le indique (...)
29. Realiza primero la operación aritmética y a continuación lo muestra tantas veces como se le indique (2 2 2) 
30. Crea un array de palabras con las palabras que se le indiquen. 
31. Al usar %w en minúsculas los interpreta como caracteres.
32. Al usarl con la %W en mayúscula interpreta como saltos de línea y tabulación.
33. Crea un array vacío de tamaño 3.
34. Crea un array de tamaño 3 y los llena con 0.
35. Crea un array con los valores indicados con retornos de carro.
36. 0 2 4
37. => ["b"]
    => ["d", "e"]
    => ["a", "b", "c"]
    => ["a"]
    => ["d", "e"]
38. => ["A", "B"]
    => ["C", "D", "E"]
    => [1, 2, 3]
    => []
    => ["Z"]
    => nil
39. => [1, 2, 3]
    => [1, 2, 3, 4, 5]
    => [1, 2, 3, 4, 5, [6, 7, 8]]
    TypeError: can't convert Fixnum into Array
40. => ["a", "a"]
    => ["a", "b", "c", "b", "a"]
41. => [0, 0, 0, 0, 0, 0, 0, 0]
42. => a << 1
    => [1, 2, 3]
    => [1, 2, 3, [4, 5, 6]]
    => [1, 2, 3, [4, 5, 6], 7, 8]
43. => [1, 1, 2, 2, 3, 3, 4]
    => [5, 5, 4, 4, 3, 3, 2]
    => [1, 2, 3, 4, 5]
    => [5, 4, 3, 2, 1]
    => [2, 3, 4]
    => [4, 3, 2]
44. => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    => [1, 2, 3, 4, 5, 6, 7, 8, 9]
    false
    true
    1 3 5 7 9 => 1...10
    NoMethodError: undefined method `to_a' for 3:Fixnum
45. true
    true
    true
46. hello
    nill
    hello
47. false
    true
    symbol
    true
    true
48. RubJava=> nil
49. => "3 rubies"
50. => [4, 5]
    => 5
    => [1, 2, 3]
51. => [:a, :b]
    => [1, 2]
    => {:a=>1, :b=>2, :c=>3}
    => {:a=>1, :b=>2, :c=>3}
    => {:b=>2, :c=>3}
    => {:a=>1}
52. Para darle valor a los argumentos del bloque
53. El primero es una clase que define el valor por defecto a las claves HASH. El segundo inicializa el HASH.
54. hello
    world
    hello
    LPP
    => nil
55. Ordena las claves hash mediante interacciones

